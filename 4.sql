-- INNER JOIN: Выводит названия товаров и наименования поставщиков для каждой поставки.
SELECT Товар.Наименование_товара, Поставщики.Наименование_поставщика
FROM Товар
INNER JOIN Поставка ON Товар.Номер_товара = Поставка.Номер_товара
INNER JOIN Накладные ON Поставка.Номер_накладной = Накладные.Номер_накладной
INNER JOIN Поставщики ON Накладные.Номер_поставщика = Поставщики.Номер_поставщика;

-- LEFT JOIN: Выводит названия товаров и вес упаковки (где упаковка доступна).
SELECT Товар.Наименование_товара, Упаковка.Вес_упаковки
FROM Товар
LEFT JOIN Упаковка_и_товар ON Товар.Номер_товара = Упаковка_и_товар.Номер_товара
LEFT JOIN Упаковка ON Упаковка_и_товар.Номер_упаковки = Упаковка.Номер_упаковки;

-- RIGHT JOIN: Выводит наименования поставщиков и номера накладных, включая накладные без поставщика.
SELECT Поставщики.Наименование_поставщика, Накладные.Номер_накладной
FROM Поставщики
RIGHT JOIN Накладные ON Поставщики.Номер_поставщика = Накладные.Номер_поставщика;

-- FULL OUTER JOIN: Выводит названия товаров и дату регистрации упаковки, включая товары и упаковки без соответствий.
SELECT Товар.Наименование_товара, Упаковка.Дата_регистрации_упаковки
FROM Товар
FULL OUTER JOIN Упаковка_и_товар ON Товар.Номер_товара = Упаковка_и_товар.Номер_товара
FULL OUTER JOIN Упаковка ON Упаковка_и_товар.Номер_упаковки = Упаковка.Номер_упаковки;
--CROSSJOIN

SELECT 
    Товар.Номер_товара, 
    Товар.Наименование_товара, 
    Упаковка.Номер_упаковки, 
    Упаковка.Вес_упаковки
FROM 
    Товар 
CROSS JOIN 
    Упаковка;
-- Получаем уникальные способы оплаты, использованные в чеках.
SELECT DISTINCT Способ_оплаты FROM Чеки;

-- Получаем товары со сроком годности в 2024 году.
SELECT * FROM Товар WHERE Срок_годности_товара BETWEEN '2024-01-01' AND '2024-12-31';

-- Получаем первые два товара из таблицы.
SELECT * FROM Товар LIMIT 2;

-- Пропускаем первый товар и выводим следующие два.
SELECT * FROM Товар ORDER BY Номер_товара LIMIT 2 OFFSET 1;

-- Получаем сотрудников, чье имя начинается на 'Иван'.
SELECT * FROM Сотрудники WHERE ФИО_сотрудника LIKE 'Иван%';
-- Получаем сотрудников, чье имя не начинается на 'Петр'.
SELECT * FROM Сотрудники WHERE ФИО_сотрудника NOT LIKE 'Петр%';

-- Получаем сотрудников, чьи фамилии заканчиваются на 'ов'.
SELECT * FROM Сотрудники WHERE ФИО_сотрудника ~ '^[А-Яа-я]+ов';

-- Получаем средний вес упаковок.
SELECT AVG(Вес_упаковки) AS Средний_вес FROM Упаковка;
-- Получаем общее количество товаров.
SELECT COUNT(*) AS Общее_количество_товаров FROM Товар;
-- Получаем максимальную оценку в отзывах.
SELECT MAX(Оценка) AS Максимальная_оценка FROM Отзывы;


-- Получаем товары, которые продавались в количестве более трех единиц по одному чеку.
SELECT * FROM Товар WHERE Номер_товара IN (SELECT Номер_товара FROM Продажа_товара WHERE Количество_единиц_товара_по_чеку > 3);

-- Получаем сотрудников с добавленной категорией по должности (например, управляющий персонал или обслуживающий персонал).
SELECT Номер_сотрудника, Должность_сотрудника,
    CASE
        WHEN Должность_сотрудника = 'Менеджер' THEN 'Управляющий персонал'
        WHEN Должность_сотрудника = 'Кассир' THEN 'Обслуживающий персонал'
        ELSE 'Прочее'
    END AS Категория
FROM Сотрудники;

-- Группируем сотрудников по должности и выводим количество сотрудников в каждой должности в порядке убывания.
SELECT Должность_сотрудника, COUNT(*) AS Количество_сотрудников
FROM Сотрудники
GROUP BY Должность_сотрудника
ORDER BY Количество_сотрудников DESC;

-- Группируем продажи по номеру товара и упаковки, сортируя сначала по товару по возрастанию, затем по общему количеству по убыванию.
SELECT Номер_товара, Номер_упаковки, SUM(Количество_единиц_товара_по_чеку) AS Общее_количество
FROM Продажа_товара
GROUP BY Номер_товара, Номер_упаковки
HAVING Номер_упаковки <> 3
ORDER BY Номер_товара ASC, Общее_количество DESC;

